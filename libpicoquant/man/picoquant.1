.TH PICOQUANT 1 "2014-09-23" "0.3"
.SH NAME
picoquant \- decode PicoQuant binary formats into ascii
.SH SYNOPSIS
.B picoquant
[
.BI \-\-file\-in= file
] [ 
.BI \-\-file\-out= file
] [ 
.BI \-\-binary\-out
] [
.BI \-\-print\-every= number
] [
.BI \-\-to\-t2
] [ 
.BI \-\-number= number
]
.br
.B picoquant
[
.BI \-\-file\-in= file
] [
.BI \-\-file\-out= file
] [
.BI \-\-resolution\-only
] [
.BI \-\-header\-only
] [
.BI \-\-mode\-only
] [
.BI \-\-help
] [
.BI \-\-version
]
.SH DESCRIPTION
.B picoquant
decodes PicoQuant binary formats into ascii for use with photon correlation
code. 
.SS Input formats
The following input file formats are supported:

\fITimeHarp\fR
.TS
tab (@);
l l.
v2.0@thd
v3.0@thd, t3r
v5.0@thd
v6.0@thd, t3r
.TE

\fIPicoHarp\fR
.TS
tab (@);
l l.
v2.0@phd, pt2, pt3
.TE

\fIHydraHarp\fR
.TS
tab (@);
l l.
v1.0@hhd, ht2, ht3
v2.0@hhd, ht2, ht3
.TE

Note that marker records are not current implemented. If a marker is found,
an error will be reported.
.SS Output formats
There are three major output formats: histogram, t2, and t3. 

\fIHistogram\fR mode refers to interactive (*hd) or continuous acquisition
(*hc), and consists of the association of an integer number of events with a
particular time bin. Data of this form are output as: 

	curve number, time bin (left edge), time bin (right edge), counts

\fIT2\fR mode refers to TTTR data where events are associated with a time
relative to the start of the experiment. The raw data includes overflows;
these are not reported, but are used to determine the absolute arrival time
of the photon. Photon events are output as:

	channel number, arrival time

\fIT3\fR mode refers to TTTR data where events are associated with a sync
pulse number relative to the start of the experiment, and an arrival time
relative to the sync pulse. As with t2 data, the raw data includes pulse
counter overflows. These records are not reported, but are used to determine
the absolute pulse index for the experiment. Photon events are output as:

	channel number, arrival pulse, relative arrival time
.SH EXAMPLES
.SS General
Viewing the header (measurement settings and metadata):

	$ picoquant --file-in data.hhd --header-only
.br
	Ident = HydraHarp
.br
	FormatVersion = 2.0
.br
	NumberOfCurves = 4
.br
	...

Determining the measurement mode:

	$ picoquant --file-in unknown_data --mode-only
.br
	interactive

.SS Histogram
Reading the data for each curve:

	$ picoquant --file-in data.hhd
.br
	0,0.00,8.00,3
.br
	0,8.00,16.00,0
.br 
	0,16.00,24.00,2
.br
	...

Determining the resolution of each curve of a measurement:

	$ picoquant --file-in data.hhd --resolution-only
.br 
	0,8.00
.br
	1,8.00
.br
	2,8.00
.br
	3,8.00
.SS T2
Reading photon records from the file:

	$ picoquant --file-in data.ht2 
.br
	1,1740488293
.br 
	1,2126735592
.br
	2,3339029500	
.br
	...

Reading the first few records from a file:

	$ picoquant --file-in data.ht2 --number 3
.br
	1,1740488293
.br 
	1,2126735592
.br
	2,3339029500	

Determining the resolution of the measurement:

	$ picoquant --file-in data.ht2 --resolution-only
.br
	1.00
.SS T3
Reading photon records from the file:

	$ picoquant --file-in data.ht3
.br
	2,389,3504
.br
	3,658,4192
.br
	1,697,2656
.br
	...

Reading the first few records from a file:

	$ picoquant --file-in data.ht3 --number 3
.br
	2,389,3504
.br
	3,658,4192
.br
	1,697,2656

Determining the resolution of the measurement:

	$ picoquant --file--in data.ht3 --resolution-only
.br
	16.00
.SH OVERVIEW
The general procedure for decoding a a PicoQuant file involves four major 
decisions. First, the first bytes of the header, common to all file formats,
are read in. This data indicates which hardware name and version are present.
Second, if the hardware is supported the rest of the hardware-specific header
is loaded, to determine the measurement mode. If the measurement mode is 
supported, then the mode-specific header is loaded to finish loading the 
header.

Once the header is loaded, the command-line options are processed. This 
includes the ability to report the resolution, mode, or header for the data,
and passing any of these options performs the specified activity, without
any further action. If no such option is passed, the data contained in the
remainder of the file will be processed and translated for output.

Most of the time, specifying the input file (--file-in) is sufficient, as
this will output the data in a plain text format. 
.SH OPTIONS
.SS General options
.TP
.BR \-h ", " \-\-help
Display a usage message.

.TP
.BR \-V ", " \-\-version
Display the version of the program.

.TP 
.BR \-v ", " \-\-verbose
Display debug messages during exectution, sent to stderr. 
.SS Files and formats
.TP
.BI \-i\  file \fR,\ \fB\-\-file-in= file
Specifies the name of the binary-format file to read. By default this is stdin.
The file is expected to be a file output by PicoQuant software, and the header
contained in the file will be used to determine the hardware identity and 
format version.

.TP
.BI \-o\  file \fR,\ \fB\-\-file-out= file
Specifies the name of the file to write to. By default this is stdout.
The exact output format will depend on the mode of the measurement, but all
are some form of ascii comma-delineated lines representing individual records.

.TP
.BR \-b ", " \-\-binary-out
The default behavior is to output ascii data. With this flag, the program
will instead output the binary form of that data.
\# Add these back in when I get around to implementing the on-demand versions.
\# .TP
\# .BR \- ", " \-\-hardware " HARDWARE"
\# This must be specified with --format-version.
\# The program normally uses the header of the file to determine the hardware 
\# type and data format version, but for raw data coming off the hardware there 
\# is no header. Use these two options to bypass the automatic detection code 
\# and instead directly access the desired decoder.
\# 
\# .TP
\# .BR \- ", " \-\-format-version " VERSION"
\# See --hardware.
.SS Debug and auxilliary
.TP
.BI \-p\  number \fR,\ \fB\-\-print-every= number
Prints a status message to stderr after processing every NUMBERth record 
in TTTR mode. This includes a time and record number, and is intended to 
provide an external means for tracking process.
.TP
.BR \-z ", " \-\-resolution-only
Print the resolution of the measurement. This is a single float for 
continuous, t2, and t3 mode, and is a float per curve in interactive mode, on 
separate lines. 

.TP
.BR \-r ", " \-\-header-only
Print the file header information, in an ini-style format. 

.TP
.BR \-m ", " \-\-mode-only
Print the mode of the measurement (interactive, continuous, t2, t3).

.TP
.BR \-t ", " \-\-to-t2
For t3-mode data, use the input rate at the sync channel to convert the data
to its t2 representation. 

.TP
.BI \-n\  number \fR,\ \fB\-\-number= number
Process only the first NUMBERth records (TTTR mode).
.SH ERRORS
Errors and other debug information is output to stderr.

Unsupported hardware:

	$ picoquant --file-in some_file.py
.br
	ERROR: Could not identify board #!/usr/bin/env python	

Unsupported measurement mode:

	$ picoquant --file-in some_file.thc
.br
	ERROR: Mode not recognized: 1
.SH BUGS
There are no known bugs. Please email the author if you find any.
.SH AUTHOR
Thomas Bischof <tbischof@mit.edu>
