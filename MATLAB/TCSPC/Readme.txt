This folder contains a sample Matlab script for parsing / reducing / analyzing / generating plots from TCSPC-style data(AnalyzeSWIRTCSPC_20150826_DanSWIRDotsII.m), along with some raw data (in the form of .phd files, which are Picoquant TCSPC histograms), the experimental log from the corresponding measurements, and a couple necessary helper functions. It's worth noting that the helper functions need to be located somewhere on Matlab's path so that the main function can find them. (2016-12-21. Ed. I have additional parsing routines for the 1-dimensional correlation from Thomas Bischof's Python code somewhere else, but I'd have to track them down.)

In addition, I've included the example figures (.fig and .png, with and without the monoexponential fit) that this script generates for the 'particular curves', here, showing the effect of the solvent on the emission dynamics of the 1430nm dots. 

To briefly describe my 'paradigm' for analysis, I have a separate script for each set of experiments that I do. However, the critical point is that ~99% of the code will remain the same -- your job as the user is to change the many, many parameters to select where the data files are located, which curves you'd like to plot, how you want to reduce the data, any fitting, data selection, the figure appearance, etc. etc. etc. As such, I'd consider this as a 'template' program, which you'll use to write all of yours.

As a comment on the 'method behind my madness', although the next step in usability would clearly be to write a GUI, I've hesitated here (...not just because of the effort involved) but also because I really appreciate the ability to always generate the final figures directly from the main data, so that I can't forget any of the processing steps that I might have done along the along the way. To say it, I'm not a fan of 'tweaking things' later on, as it weakens the direct link between the data and the figure. Better still, as I'm sure you'll sympathize, if you change your mind about something later (i.e. when I decided that I wanted to use a 15-point moving average filter instead of a 9-point), it's very straightforward to make the change and re-generate the figures exactly as they'd appear in a manuscript.

Though I hope that the script is sufficiently commentated, I clearly wrote this for my own use, so I'd be happy to field questions/take feedback! 

Also, all of this was written to run in MATLAB 2014b, but pretty much everything should be pretty forward- and backward-compatible. (...I updated everything from 2008a last year, and the only thing that broke was the ability to put a title on the legend.)

To summarize how this works in Matlab, your first job in getting the program to run on your computer will be to alter the program so that it knows in which folder you've put the raw experimental data (*.phd) and experimental log files. (...it's set up top in the 'PathD' variable). As a note, if you chose to have the program automatically save the figures that you generate (... the 'isSaveFigs' flag), by default they'll all be put in a new subfolder (/Analysis) in whatever directory you specify in PathD. (Note that exporting figures is a bit slow on most computers, so I've left this flag as 'false' for now.) By default, when isSaveFigs is 'true', the program saves both a Matlab .fig file and a .png (...as they're my preference), but Matlab is able to create a variety of formats, including vector-type pdfs. Additionally, you'll see that you can generate figures in either black- or white-background, by setting the 'DefaultFigColour' to [1 1 1] (for white) or [0 0 0] for black. To be clear, the two white-background figures presently in the /Analysis folder are exactly what the script-as-written should generate when you run it. If they aren't... start troubleshooting! (I've tried to track down all of the dependencies so that this should run sensibly, but let me know if something's obvious missing when you give it a try.)

2016-12-21 Ed. 
As I mentioned, in terms of converting to Phython, I suspect the three sticking points will be 
1) Ensuring that the MainData object/structure is reproduced (The Matlab version is extremely flexible/user-friendly)
2) Re-coding the least-squares curve fit (This is likely a much lower priority at first, so I'd comment it out and tackle it later)
3) Sensibly translating the many piece of code that 'make the figure pretty' to matlplotlib (or similar)
